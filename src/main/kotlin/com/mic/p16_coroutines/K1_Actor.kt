package com.mic.p16_coroutines

/**
 * Actor(像消息通信)
 * 1.用另一种思维来解决问题，而不是只有共享内存这一种方式
 * 2.提高锁的抽象程度，尽量不在业务中出现锁，减少因为使用锁出现的问题，如，死锁
 *
 * 3.Actor模型提倡的是：通过通信来实现共享内存，而不是用共享内存来实现通讯。这点是与Java解决共享内存最大的区别。
 * 举个例子，在Java中我们要去操作共享内存中的数据时，每个线程都需要不断地获取共享内存的监视器锁，
 * 然后将操作后的数据暴露给其他线程访问使用，用共享内存来实现各个线程之间的通信。而在Akka中，我们可以将共享可变的变量作为一个Actor内部的状态，利用Actor模型本身串行处理消息的机制来保证变量的一致性。
 */

/**
 * CQRS
 */

fun main() {

}