1. Dependence Inversion Principle, DIP

     ---含义
      1.高层模块不应用依赖低层模块，两者都应该依赖其抽像
           -- 每一个逻辑的实现都是由原子逻辑组成的，不可分割的原子逻辑就是低层模块，原子
              逻辑再组装就是高层模块
      2.抽象不应该依赖细节
      3.细节应该依赖抽像

     ---表现
      1.模块间的依赖通过抽象发生，实现类之间不发生直接依赖关系，其依赖关系是通过接口或抽象
        类产生的
      2.接口或抽象类不依赖于实现类
      3.实现类依赖接口或抽象类

     ---依赖的三种写法
      1.构造函数传递依赖对象
      2.Setter方法传递依赖对象
      3.接口声明依赖对象 --接口注入

     ---实践
      1.每个类尽量都有接口或抽象类，或两者都有，这是基本要求，有了抽象才可能依赖倒置
      2.变量的表面类型尽量是接口或抽象类
      3.任何类都不应该从具体的类派生
      4.尽量不要覆写基类的方法
           -- 如果基类是一个抽象类，而且这个方法已经实现了，子类尽量不要覆写，类间的依赖
              是抽象，覆写了抽象方法，对依赖的稳定性会产生一定的影响

























